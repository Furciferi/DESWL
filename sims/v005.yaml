
# A simulation based on the Great3 rgc branch, but tailored to DES specifics including
# outputing to MEDS files.
#
# For the psf, we use a combination of Kolmogorov for the atmospheric component, and an
# OpticalPSF for the optics, using parameters appropriate for DECam and the Blanco telescope.
#
# The galaxies are bulge + disk + knots with epoch-dependent morphological features.
# We use g,r,i,z bands for the 4 epochs for each sky location.  The bulge and disk fluxes in
# each band are calculated by custom modules that integrate appropriate SEDs over the DES
# band passes.  TODO: We have LSST bandpass descriptions.  Not sure about DES.  Probably just
# use LSST bandpasses for now.
#
# For the wcs, we use a random location within a full DES focal plane, which we take from 62
# images files from SV data.  We don't include these files in the repo, since they total about
# 700 MB.  You can download a tarball with the files used by this script at
#
#    http://www.sas.upenn.edu/~mjarvis/des_data.html
#
# The applied shear is random in each output file, ranging in amplitude from 0.01 to 0.08.
#
# The output files are MEDS files using the new psf extension to store images of the 
# PSF, so no interpolation is necessary.  In this sim, the PSF is actually a constant, but
# when we start making the PSF variable, this will be useful.

modules:
    # The GalSim config processor will import each of these at the start of processing this
    # file, so it provides a way to have custom types for anything (values, objects, inputs,
    # output files, etc.).  In this case, three of these are in the current directory, so if
    # you run `galsim meds.yaml` in this directory, it will find them.  But they can be anywhere
    # in your PYTHONPATH.

    # Use the extra features from the galsim.des module
    - galsim.des

    # A custom package in this directory for measuring shapes with HSM
    - hsm_shape

    # Read the WCS from a (in this case random) location within a real DES focal place observation.
    - des_wcs

    # Calculate appropriate disk and bulge fluxes given the band pass to use.
    - band_flux

    # A custom package that implements SumMultiple, a sum of several components that are
    # identically defined.  In our case the number of components is a random variate, being
    # the number of HII region knots in the galaxy.
    - sum_multiple

psf:
    type: Convolve

    # This means the psf should change per output file, not per object as would be the default.
    index_key : file_num

    items:
    # The atmospheric component
    -   type: Kolmogorov
        # To avoid PSFs that were "too round", the ellipticity was drawn from a uniform
        # distribution from sqrt(1.e-4) to sqrt(9.e-4), based on an estimate of the
        # typical variance of e in ground-based imaging.
        ellip:
            type: EBeta
            e:
                type: Random
                min: 0.01
                max: 0.03
            beta:
                type: Random

        # The seeing is taken from a plausible distribution of seeing values
        # ranging from 0.6 to 1.1.
        fwhm:
            type: RandomDistribution
            x: [ 0.6, 0.7, 0.8, 0.9, 1.0, 1.1 ]
            f: [  0., 10., 20., 40., 30.,  0. ]

    # The optical component
    -   type: OpticalPSF
        # Take lambda = 800 nm.  D = 4 m.  lam/D = 0.04 arcsec
        lam_over_diam: "$800 * 1.e-9 / 4 * 206265"

        # I don't know what the right value of this is.  This is a guess.
        obscuration: 0.3

        # DECam has 4 struts.  Not sure what strut_thick or strut_angle is appropriate here.
        # So these are just guesses.
        nstruts: 4
        strut_thick: 0.05  # In units of pupil diameter.
        strut_angle: 10 degrees

        # According to Aaron Roodma, for DES the appropriate rms values are
        # [ 0.13, 0.13, 0.14, 0.06, 0.06, 0.05, 0.06, 0.03 ]
        defocus: { type: RandomGaussian, sigma: 0.13 }
        astig1: { type: RandomGaussian, sigma: 0.13 }
        astig2: { type: RandomGaussian, sigma: 0.14 }
        coma1: { type: RandomGaussian, sigma: 0.06 }
        coma2: { type: RandomGaussian, sigma: 0.06 }
        trefoil1: { type: RandomGaussian, sigma: 0.05 }
        trefoil2: { type: RandomGaussian, sigma: 0.06 }
        spher: { type: RandomGaussian, sigma: 0.03 }

        # Sometimes the OpticalPSF wants to make a very large image of the PSF.  But if the
        # PSF image is larger than the postage stamp onto which we will draw the object,
        # the larger area is mostly wasted.  Setting max_size to the size of the postage stamp
        # we will eventually draw onto helps avoid wasted calculations.
        # This is in arcsec, so max_size = stamp_size * pixel_scale
        # We're using a non-square wcs, so there isn't a well-defined pixel scale.  Use
        # the maxLinearScale to get the maximum "pixel scale" for the parallelogram.
        max_size: "$@image.size * wcs.maxLinearScale()"
        suppress_warning: true

gal:
    # Our galaxy is a sum of several components
    type: Sum
    items:
      -
        # Disk component
        type: Exponential
        half_light_radius:
            type: LogNormal
            mean: 1.2
            sigma: 0.4
        flux:
            # This is a custom type that calculates the appropriate flux for a disk component
            # in a given band.
            type: DiskFlux
            normalization:
                type: LogNormal
                mean: 500.
                sigma: 500.
            band: "@epoch_params.band"
        ellip:
            # TODO? Have the ellipticity distribution be band-dependent?
            type: EtaBeta  # This way we don't have to worry about e > 1
            eta: 
                type: LogNormal
                mean: 0.2
                sigma: 0.1
            beta: { type: Random }

      -
        # Bulge component
        type: Sersic
        n:
            type: Random  # Uniform in the range
            min: 2.5
            max: 4.5
        half_light_radius:
            type: LogNormal
            mean: 1.2 # XXX: The same as exponential?
            sigma: 0.4
        flux:
            # This is a custom type that calculates the appropriate flux for a bulge component
            # in a given band.
            type: BulgeFlux
            normalization:
                type: LogNormal
                mean: 500.  # XXX: Again, should this be different mean,sigma than Exp?
                sigma: 500.
            band: "@epoch_params.band"
        ellip:
            type: EtaBeta
            eta: 
                type: LogNormal
                mean: 0.2  # XXX: Ditto.
                sigma: 0.1
            beta: { type: Random }

      -
        # Knots component
        type: SumMultiple
        nobj:   # How many knots?  Poisson random variate with mean number of knots = 1.
            type: Poisson
            mean: 1  # TODO: Make this redshift dependent?  More star forming at high z.
        obj:
            # The profile here is basically just the PSF, so a delta function here.
            # We implement that as a very small Gaussian.
            type: Gaussian
            sigma: 1.0e-3
            flux:
                # Some fraction of the total disk flux.
                type: Eval
                str: "flux_frac * @gal.items.0.flux"
                fflux_frac: # The first f means float.  This will be flux_frac in the eval.
                    type: RandomDistribution
                    # Range from 0.1 to 1.0, weighted more toward low end.
                    x: [ 0.1, 0.15, 0.2, 0.3, 0.5, 0.7, 1.1 ]
                    f: [  0., 3.,  10., 4., 1., 0.2,  0. ]
            shift:
                type: RTheta
                r:
                    # Have their location be drawn from the same profile as the disk light.
                    function:
                        type: FormattedStr
                        str: "x*exp(-x/%f)"
                        items:
                            - "$(@gal.items.0).scale_radius"
                    x_min: 0
                    x_max: 5
                theta: { type: Random }

    # The shear is chosen randomly within an annulus 0.01 < |g| < 0.08
    shear:
        type: GBeta
        # Change the shear every file, not every object.
        index_key : file_num
        g:
            type: RandomDistribution
            # Using p(g) = |g| means uniform in the annulus.
            function: x
            x_min: 0.01
            x_max: 0.08
        beta: { type: Random }

image:
    # Eventually, it would be nice to have variable stamp sizes based on the galaxy size, but
    # don't bother with that for now.
    size: 48

    # Use a real wcs from some random location within a DES focal plane.
    wcs :
        type : DES_Local  # Defined in des_wcs.py in this directory.

        # We could specify a chipnum here if we wanted.  The default is to pick a random chipnum
        # from 1-62

        # This also optionally takes image_pos, but we'll use the default here, which is to pick
        # a random location on the chip.

    random_seed: 8675309   # Jenny

    # Simple Gaussian noise.  The range here is much larger than the range used for Great3 to
    # simulate the wide range in sky levels we get in real data.
    # This might need some work to tune to a reasonable average S/N level.
    noise:
        type: Gaussian
        variance:
            type: Random
            min: 0.002
            max: 0.006

    # Offset is just random within central pixel.
    offset:
        type: XY
        x: { type: Random, min: -0.5, max: 0.5 }
        y: { type: Random, min: -0.5, max: 0.5 }

    # This means the code will parallelize the creation of a single output file,
    # splitting up the postage stamps among the available cores.
    # This is normally overridden by the output.nproc item below, so the parellelization
    # will be done over files instead.  But if you modify this to only do one file or
    # set output.nproc=1, then this stamp-based parallelization will turn on.
    # However, we aren't using that here.
    #nproc: -1

    # Great3 found that some stamps needed a larger fft size than default.  I don't think it's
    # necessary here, but it doesn't hurt to put this in.
    gsparams: {maximum_fft_size: 10240}

input:
    des_wcs:
        # This is used by the DES_Local wcs type.
        # It reads in a full field worth of WCS objects, which DES_Local will select from
        # and get a local WCS at some (in this case random) image position.
        # This choice is a random Y1 field in the SPTE region.
        dir : "/astro/u/astrodat/data/DES/OPS/red/20140715085838_20131201/red/DECam_00259397"
        root : "DECam_00259397"

epoch_params :
    band : 
        type : List
        items: [ 'g', 'r', 'i', 'z' ]  # Could add u,Y if we want.

output:
    type: MEDS
    nobjects: 10000  # nobj per file
    nstamps_per_object: 1  # For now, single epoch sim.

    dir: 
        type: FormattedStr
        format: "/astro/u/mjarvis/work/sims/%s"
        items:
        - '@root'  # GalSim stores the root name of the yaml file as root. This is the version tag.

    file_name:
        type: FormattedStr
        format: "sim-%s-%04d-%s.fits"
        items:
        - '@root'
        - { type: Sequence, nitems: '@output.nfiles' }
        - '@epoch_params.band'

    # Note: This can be changed from the command line as `galsim meds.yaml output.nfiles=10` say.
    # Likewise for any other parameters in the configuration.  This is often more convenient than
    # changing the original YAML configuration file.  Especially for temporary modifications.
    nfiles: 200

    # For each output file, it will do this many epochs.
    # Epochs keep the galaxy properties the same, but use new values for everything else.
    # Things that need to change per epoch are given in the epoch_params.  The values can be
    # grabbed from other places in the config via e.g. "@epoch_params.band", where it will get
    # the correct value for the current epoch being worked on at the time.
    nepochs: 4

    # This means the code will parallelize across the different files, doing a full
    # output file in each core at a time.
    # This is generally better than image.nproc, since it doesn't require as much interprocess
    # communication, which can be rather slow.
    # However, we'll just let the queue do the work of parallelizing in this case.  I will
    # submit jobs that each do a single file.  
    # Note: once we start using RealGalaxies, it will probably be more efficient to use -1 here.
    #nproc: -1

    # Output truth catalogs with some of the generated values
    truth:
        file_name :
            type: FormattedStr
            format: "truth_catalog-%s-%04d-%s.fits"
            items:
            - '@root'
            - { type: Sequence, nitems: '@output.nfiles' }
            - '@epoch_params.band'
        columns:
            num: obj_num
            x: image.offset.x
            y: image.offset.y

            psf_hlr: "$(@psf).calculateHLR()"
            # Use hsm to get PSF shape estimates
            psf_e1:
                type: Eval
                str: "psfe.e1"
                gpsfe :
                    index_key: file_num  # Only remeasure for each new file num.
                    type: HSM_Shape_Measure  # Defined in hsm_shape.py in this directory.
                    obj: 'psf'
            psf_e2: "$(@output.truth.columns.psf_e1.gpsfe).e2"

            cosmos_index: "$(@gal.items.0).index"

            # This isn't the same thing.  The above index is the one in the file.  This index
            # is just an index into the list of galaxies that pass our cuts.
            alt_cosmos_index: gal.items.0.index

            theta: "$(@gal.rotate).rad()"
            g1: "$(@gal.shear).g1"
            g2: "$(@gal.shear).g2"


# HISTORY:
# v001: 1/4/2016
#       Initial run using GalSim dev branch #654.
#       Erin found a few bugs.
# v002: 1/5/2016
#       Still using GalSim branch #654.
#       Changed to 4 digits for output file format. 
#       Added output of real index and id in COSMOS catalog.
# (v003, v004 were unrelated to this)
# v005: 5/14/2016
#       Changed galaxies to be band-dependent.
#       Galaxies are bulge + disk + knots
#       Will need to use branch #699 with multi-epoch capability (not actually written yet).
