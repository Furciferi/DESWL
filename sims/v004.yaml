
# This simulation is designed to test WCS conventions.
#
# The galaxies are all round.
#
# For the psf, we use an ellitpical Kolmogorov with a random shape with non-zero mean
#
# For the wcs, we use a TAN projection of a non-very-square Jacobian that is different for 
# each file.
#
# The applied shear is different for each file, also with non-zero mean.
#
# The output files are MEDS files using the new psf extension to store images of the 
# PSF, so no interpolation is necessary.

modules:
    - galsim.des

psf:
    type: Kolmogorov

    ellip:
        type: E1E2
        # Make it asymmetric so mean e1,e2 is not zero.
        e1:
            type: Random
            min: -0.13
            max: 0.09
        e2:
            type: Random
            min: -0.08
            max: 0.15

    fwhm: 0.9

gal:
    type: Exponential
    half_light_radius:
        type : Random
        min: 0.5
        max: 2.0
    flux:
        type: Random
        min: 1000
        max: 5000

    shear:
        index_key: file_num
        type: G1G2
        g1:
            type: Random
            min: 0.0
            max: 0.05
        g2:
            type: Random
            min: -0.03
            max: 0.02

stamp:
    # We're not drawing on a normal image, so we need to mock up an image_pos for the wcs to use.
    image_pos:
        type: XY
        x: { type: Random, min: 0, max: 2048 }
        y: { type: Random, min: 0, max: 2048 }

image:
    size: 48

    wcs :
        type : Tan
        dudx :
            type: Random
            min: -0.03
            max: 0.03
        dudy :
            type: Random
            min: 0.24
            max: 0.28
        dvdx :
            type: Random
            min: -0.28
            max: -0.24
        dvdy :
            type: Random
            min: -0.03
            max: 0.03

        origin : { type: XY, x: 1024., y: 1024 }
        ra : 19.3 hours
        dec : -33.1 degrees

    random_seed: 8675309

    noise:
        # Low noise.
        type: Gaussian
        sigma: 0.2

    # Offset is just random within central pixel.
    offset:
        type: XY
        x: { type: Random, min: -0.5, max: 0.5 }
        y: { type: Random, min: -0.5, max: 0.5 }

output:
    type: MEDS
    nobjects: 10000  # nobj per file
    nstamps_per_object: 1  # For now, single epoch sim.

    dir: 
        type: FormattedStr
        format: "/astro/u/mjarvis/work/sims/%s"
        items:
        - '@root'  # GalSim stores the root name of the yaml file as root. This is the version tag.

    file_name:
        type: FormattedStr
        format: "sim-%s-%04d.fits"
        items:
        - '@root'
        - { type: Sequence, nitems: '@output.nfiles' }

    # Note: This can be changed from the command line as `galsim meds.yaml output.nfiles=10` say.
    # Likewise for any other parameters in the configuration.  This is often more convenient than
    # changing the original YAML configuration file.  Especially for temporary modifications.
    nfiles: 200

    nproc: 10

    # Output truth catalogs with some of the generated values
    truth:
        file_name :
            type: FormattedStr
            format: "truth_catalog-%s-%04d.fits"
            items:
            - '@root'
            - { type: Sequence, nitems: '@output.nfiles' }
        columns:
            num: obj_num
            x: stamp.image_pos.x
            y: stamp.image_pos.y

            dx: image.offset.x
            dy: image.offset.y

            g1: gal.shear.g1
            g2: gal.shear.g2
            gal_hlr: gal.half_light_radius
            gal_flux: gal.flux

            psf_e1: psf.ellip.e1
            psf_e2: psf.ellip.e2
            psf_g1: '$(@psf.ellip).g1'
            psf_g2: '$(@psf.ellip).g2'
            psf_fwhm: psf.fwhm

            dudx: image.wcs.dudx
            dudy: image.wcs.dudy
            dvdx: image.wcs.dvdx
            dvdy: image.wcs.dvdy
            wcs_dudx: '$wcs.local(image_pos).dudx'
            wcs_dudy: '$wcs.local(image_pos).dudy'
            wcs_dvdx: '$wcs.local(image_pos).dvdx'
            wcs_dvdy: '$wcs.local(image_pos).dvdy'
            wcs_g1: '$wcs.local(image_pos).getDecomposition()[1].g1'
            wcs_g2: '$wcs.local(image_pos).getDecomposition()[1].g2'
            wcs_theta_rad: '$wcs.local(image_pos).getDecomposition()[2].rad()'
            wcs_scale: '$wcs.local(image_pos).getDecomposition()[0]'



# HISTORY:
# v003: 3/16/2016
#       New sim designed to test WCS and stamp orientation conventions.
# v004: 3/19/2016
#       Made shear and wcs vary for each file
#       Added a truth catalog output
#       Also includes a fix to GalSim that was writing wrong wcs info to meds files.
